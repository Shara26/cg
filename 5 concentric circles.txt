#include <stdio.h>
#include <GL/glut.h>

int xc, yc, r;
int click = 0;

void bresCircle(int xc, int yc, int r){
    int x, y, d;
    x = 0;
    y = r;
    d = 3 - 2*r;
    glBegin(GL_POINTS);
    do{
        glVertex2d(xc + x, yc + y);
        glVertex2d(xc + y, yc + x);
        glVertex2d(xc + x, yc - y);
        glVertex2d(xc - y, yc + x);
        glVertex2d(xc - x, yc + y);
        glVertex2d(xc + y, yc - x);
        glVertex2d(xc - x, yc - y);
        glVertex2d(xc - y, yc - x);
        
        if(d < 0){
            x += 1;
            d += 4*x - 6;
        }else{
            x += 1;
            y -= 1;
            d += 4*x - 4*y + 10;
        }
        
    }while(y >= x);
    
    glEnd();
    glFlush();
}

void draw(){
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_LINES);
    glVertex2d(0,-240);
    glVertex2d(0,240);    
    glEnd();
    glFlush();
    
    glBegin(GL_LINES);
    glVertex2d(-320,0);
    glVertex2d(320,0);
    glEnd();
    glFlush();
    
    
}

void mouse(int button, int state, int x, int y){
    y = 480 - y;
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN){
        xc = x - 320;
        yc = y - 240;
        draw();
        printf("\nCenter: (%d, %d)", xc, yc);
        fflush(stdout);
        
        glColor3f(1.0, 1.0, 0.0);
        glBegin(GL_POINTS);
        bresCircle(xc, yc, 0.5*r);
        bresCircle(xc, yc, r);
        bresCircle(xc, yc, 1.5*r);
        bresCircle(xc, yc, 2*r);
        bresCircle(xc, yc, 2.5*r);
        glEnd();
        glFlush();
    }
}

int main(int argc, char **argv){
   
    printf("\enter radius (r): ");
    scanf("%d", &r);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(1000, 100);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Circle");
    
    glClearColor(0.0, 0.0, 0.0, 0);
    glColor3f(1.0, 1.0, 1.0);
    
    gluOrtho2D(-320, 320, -240, 240);
    
    glutDisplayFunc(draw);
    glutMouseFunc(mouse);
    glutMainLoop();
    
    return 0;
}